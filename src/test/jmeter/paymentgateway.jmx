<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">10</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="P_OrderId" elementType="Argument">
              <stringProp name="Argument.name">P_OrderId</stringProp>
              <stringProp name="Argument.value">241121061748129-10001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_Thinktime" elementType="Argument">
              <stringProp name="Argument.name">P_Thinktime</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_URL" elementType="Argument">
              <stringProp name="Argument.name">P_URL</stringProp>
              <stringProp name="Argument.value">pay-uat-services.theaa.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_URLUpt" elementType="Argument">
              <stringProp name="Argument.name">P_URLUpt</stringProp>
              <stringProp name="Argument.value">theaa-api.azure-api.net</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_01_Authorize" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PaymentGateway_01_Authorize" enabled="true">
            <stringProp name="HTTPSampler.domain">${P_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/BasicCardPaymentsService.svc?apikey=d39db6280454462987266673b4a88f64</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:arr=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns:bas=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot; xmlns:car=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot; xmlns:pay=&quot;http://schemas.theaa.com/2012/01/payments&quot; xmlns:the=&quot;http://schemas.datacontract.org/2004/07/TheAA.Payments.Services.Protected.CardPayments&quot;&gt;&#xd;
    &lt;soapenv:Header /&gt;&#xd;
    &lt;soapenv:Body&gt;&#xd;
        &lt;nm:AuthorizeTransaction xmlns:nm=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot; xmlns:prx=&quot;urn:sap.com:proxy:R6P:/1SAI/TASB77FDC91C012B576BE03:702&quot;&gt;&#xd;
            &lt;ne:Identity xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&#xd;
                &lt;n0:ID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;SAP&lt;/n0:ID&gt;&#xd;
                &lt;n0:Name xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;The Insurance Application&lt;/n0:Name&gt;&#xd;
            &lt;/ne:Identity&gt;&#xd;
            &lt;n0:Account xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;10001&lt;/n0:Account&gt;&#xd;
            &lt;ne:TransactionDetails xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&#xd;
                &lt;ne:Metadata xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;&#xd;
                    &lt;n0:CustomerID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;10007018&lt;/n0:CustomerID&gt;&#xd;
                    &lt;n0:OrderID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;Order_${__time(yyyy-MM-dd HH:mm:ss)}&lt;/n0:OrderID&gt;&#xd;
                    &lt;n0:ProductID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;MO&lt;/n0:ProductID&gt;&#xd;
                &lt;/ne:Metadata&gt;&#xd;
                &lt;ne:Value xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;&#xd;
                    &lt;n0:Amount xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;11&lt;/n0:Amount&gt;&#xd;
                    &lt;n0:Currency xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;GBP&lt;/n0:Currency&gt;&#xd;
                &lt;/ne:Value&gt;&#xd;
            &lt;/ne:TransactionDetails&gt;&#xd;
            &lt;ne:PaymentMethod xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&#xd;
                &lt;ne:Card xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;&#xd;
                    &lt;n0:PayerID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;COM-CR-c69AskhbE7Viqt1&lt;/n0:PayerID&gt;&#xd;
 &#xd;
                    &lt;n0:SavedCardID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;COM-CR-c69AskhbE7Viqt1&lt;/n0:SavedCardID&gt;&#xd;
                &lt;/ne:Card&gt;&#xd;
                &lt;n0:CardVerificationNumber xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;123&lt;/n0:CardVerificationNumber&gt;&#xd;
            &lt;/ne:PaymentMethod&gt;&#xd;
            &lt;ne:MITCITCode xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&lt;/ne:MITCITCode&gt;&#xd;
        &lt;/nm:AuthorizeTransaction&gt;&#xd;
    &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">soapAction</stringProp>
                  <stringProp name="Header.value">http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice/IBasicCardPaymentsService/AuthorizeTransaction</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_OrderId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_OrderId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a:TransactionID&gt;(.*?)&lt;/a:TransactionID&gt;&lt;/a:Transaction&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_trans" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_trans</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a:PaymentID&gt;(.*?)&lt;/a:PaymentID&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1677543324">&lt;b:Message&gt;Approved&lt;/b:Message&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_02_CreditSavedCard" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreditSavedCard" enabled="true">
            <stringProp name="HTTPSampler.domain">${P_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/BasicCardPaymentsService.svc?apikey=d39db6280454462987266673b4a88f64</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&#xd;
    &lt;SOAP-ENV:Body&gt;&#xd;
        &lt;CreditSavedCard xmlns=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&#xd;
            &lt;Identity xmlns:a=&quot;http://schemas.theaa.com/2012/01/payments&quot; xmlns:i=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
                &lt;a:ID&gt;SAP&lt;/a:ID&gt;&#xd;
                &lt;a:Name&gt;The Insurance Application&lt;/a:Name&gt;&#xd;
            &lt;/Identity&gt;&#xd;
            &lt;Account&gt;10001&lt;/Account&gt;&#xd;
            &lt;TransactionDetails xmlns:a=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot; xmlns:i=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
                &lt;a:Metadata&gt;&#xd;
                    &lt;a:Comments xmlns:b=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot;&gt;&#xd;
                        &lt;b:string&gt;PG_Automation_Tests&lt;/b:string&gt;&#xd;
                    &lt;/a:Comments&gt;&#xd;
                    &lt;a:CustomerID&gt;10007018&lt;/a:CustomerID&gt;&#xd;
                    &lt;a:OrderID&gt;Order_${__time(yyyy-MM-dd HH:mm:ss)}&lt;/a:OrderID&gt;&#xd;
                    &lt;a:ProductID&gt;MO&lt;/a:ProductID&gt;&#xd;
                &lt;/a:Metadata&gt;&#xd;
                &lt;a:Options&gt;&#xd;
                    &lt;a:AllowPending&gt;true&lt;/a:AllowPending&gt;&#xd;
                &lt;/a:Options&gt;&#xd;
                &lt;a:Value xmlns:b=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;&#xd;
                    &lt;b:Amount&gt;36382&lt;/b:Amount&gt;&#xd;
                    &lt;b:Currency&gt;GBP&lt;/b:Currency&gt;&#xd;
                &lt;/a:Value&gt;&#xd;
            &lt;/TransactionDetails&gt;&#xd;
            &lt;PaymentMethod xmlns:a=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot; xmlns:i=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
                &lt;a:Card&gt;&#xd;
                    &lt;a:PayerID&gt;COM-CR-c69AskhbE7Viqt1&lt;/a:PayerID&gt;&#xd;
                    &lt;a:SavedCardID&gt;&lt;/a:SavedCardID&gt;&#xd;
                &lt;/a:Card&gt;&#xd;
            &lt;/PaymentMethod&gt;&#xd;
        &lt;/CreditSavedCard&gt;&#xd;
    &lt;/SOAP-ENV:Body&gt;&#xd;
&lt;/SOAP-ENV:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">soapAction</stringProp>
                  <stringProp name="Header.value">http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice/IBasicCardPaymentsService/CreditSavedCard</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1677543324">&lt;b:Message&gt;Approved&lt;/b:Message&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_03_DebitSavedCard" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DebitSavedCard" enabled="true">
            <stringProp name="HTTPSampler.domain">${P_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/BasicCardPaymentsService.svc?apikey=d39db6280454462987266673b4a88f64</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:arr=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns:bas=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot; xmlns:car=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot; xmlns:pay=&quot;http://schemas.theaa.com/2012/01/payments&quot; xmlns:the=&quot;http://schemas.datacontract.org/2004/07/TheAA.Payments.Services.Protected.CardPayments&quot;&gt;&#xd;
  &lt;soapenv:Header /&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;nm:DebitSavedCard xmlns:nm=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot; xmlns:prx=&quot;urn:sap.com:proxy:R6P:/1SAI/TASB77FDC91C012B576BE03:702&quot;&gt;&#xd;
      &lt;ne:Identity xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&#xd;
        &lt;n0:ID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;SAP&lt;/n0:ID&gt;&#xd;
        &lt;n0:Name xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;The Insurance Application&lt;/n0:Name&gt;&#xd;
      &lt;/ne:Identity&gt;&#xd;
      &lt;n0:Account xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;10001&lt;/n0:Account&gt;&#xd;
      &lt;ne:TransactionDetails xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&#xd;
        &lt;ne:Metadata xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;&#xd;
          &lt;n0:CustomerID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;10007018&lt;/n0:CustomerID&gt;&#xd;
          &lt;n0:OrderID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;Order_${__time(yyyy-MM-dd HH:mm:ss)}&lt;/n0:OrderID&gt;&#xd;
          &lt;n0:ProductID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;MO&lt;/n0:ProductID&gt;&#xd;
        &lt;/ne:Metadata&gt;&#xd;
        &lt;ne:Value xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;&#xd;
          &lt;n0:Amount xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;11&lt;/n0:Amount&gt;&#xd;
          &lt;n0:Currency xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments&quot;&gt;GBP&lt;/n0:Currency&gt;&#xd;
        &lt;/ne:Value&gt;&#xd;
      &lt;/ne:TransactionDetails&gt;&#xd;
      &lt;ne:PaymentMethod xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;&#xd;
        &lt;ne:Card xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;&#xd;
          &lt;n0:PayerID xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;COM-CR-YOKnYtAQUbdciap&lt;/n0:PayerID&gt;&#xd;
          &lt;/ne:Card&gt;&#xd;
        &lt;n0:CardVerificationNumber xmlns:n0=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;123&lt;/n0:CardVerificationNumber&gt;&#xd;
      &lt;/ne:PaymentMethod&gt;&#xd;
      &lt;ne:MITCITCode xmlns:ne=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot;&gt;CSTO&lt;/ne:MITCITCode&gt;&#xd;
    &lt;/nm:DebitSavedCard&gt;&#xd;
  &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">soapAction</stringProp>
                  <stringProp name="Header.value">http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice/IBasicCardPaymentsService/DebitSavedCard</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-905415058">&lt;a:Status&gt;Authorized&lt;/a:Status&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_04_MarkForCapture" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MarkForCapture" enabled="true">
            <stringProp name="HTTPSampler.domain">${P_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/BasicCardPaymentsService.svc?apikey=d39db6280454462987266673b4a88f64</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:bas=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot; xmlns:car=&quot;http://schemas.theaa.com/2012/01/payments/cards/cardpaymentsservice&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;bas:MarkTransactionForCapture&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;bas:markForCaptureRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;car:AmountInPence&gt;11&lt;/car:AmountInPence&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;car:ApplicationName&gt;COM&lt;/car:ApplicationName&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;car:DeferredId&gt;0&lt;/car:DeferredId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;car:MerchantId&gt;10001&lt;/car:MerchantId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;car:OrderId&gt;${C_OrderId}&lt;/car:OrderId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;car:TokenId&gt;0&lt;/car:TokenId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;car:TransactionId&gt;${C_trans}&lt;/car:TransactionId&gt;&#xd;
         &lt;/bas:markForCaptureRequest&gt;&#xd;
      &lt;/bas:MarkTransactionForCapture&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">soapAction</stringProp>
                  <stringProp name="Header.value">http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice/IBasicCardPaymentsService/MarkTransactionForCapture</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1748174382">Settled Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_05_Void" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Void" enabled="true">
            <stringProp name="HTTPSampler.domain">${P_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/BasicCardPaymentsService.svc?apikey=d39db6280454462987266673b4a88f64</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:bas=&quot;http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice&quot; xmlns:the=&quot;http://schemas.datacontract.org/2004/07/TheAA.Payments.Services.Protected.CardPayments&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;bas:VoidTransaction&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;bas:voidTransactionRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;the:ApplicationName&gt;0&lt;/the:ApplicationName&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;the:DeferredId&gt;0&lt;/the:DeferredId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;the:MerchantId&gt;10001&lt;/the:MerchantId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;the:OrderId&gt;${C_OrderId}&lt;/the:OrderId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;the:TokenId&gt;0&lt;/the:TokenId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;the:TransactionId&gt;${C_trans}&lt;/the:TransactionId&gt;&#xd;
         &lt;/bas:voidTransactionRequest&gt;&#xd;
      &lt;/bas:VoidTransaction&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">soapAction</stringProp>
                  <stringProp name="Header.value">http://schemas.theaa.com/2012/01/payments/cards/basiccardpaymentsservice/IBasicCardPaymentsService/VoidTransaction</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-418781324">Voided Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_06_RefundEnquiry">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RefundEnquiry">
            <stringProp name="HTTPSampler.domain">${P_URLUpt}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pay/uat/webAPI/Refundenquiry</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;merchantId&quot;:&quot;10001&quot;,&quot;orderId&quot;:&quot;${P_OrderId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-API-Key</stringProp>
                  <stringProp name="Header.value">2bd32efd9f5e43dbbc7bc45a769e4756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_07_Authorize" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authorize">
            <stringProp name="HTTPSampler.domain">${P_URLUpt}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pay/uat/webAPI/authorize</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Source&quot;:2,&quot;ApplicationId&quot;:null,&quot;MerchantId&quot;:&quot;10001&quot;,&quot;PayerReference&quot;:null,&quot;CardReference&quot;:&quot;COM-CR-c69AskhbE7Viqt1&quot;,&quot;Amount&quot;:4080.0,&quot;TransactionId&quot;:null,&quot;Comments&quot;:[&quot;[]&quot;],&quot;OrderId&quot;:&quot;Order_${__time(yyyy-MM-dd HH:mm:ss)}&quot;,&quot;ApplicationName&quot;:&quot;Echelon&quot;,&quot;MITCITCode&quot;:&quot;CUSE&quot;,&quot;TokenId&quot;:0,&quot;AdditionalData&quot;:null,&quot;ProductId&quot;:&quot;MO&quot;,&quot;CustomerId&quot;:&quot;161850_001&quot;,&quot;Currency&quot;:&quot;GBP&quot;,&quot;EncryptionKey&quot;:null,&quot;DeferredId&quot;:0,&quot;SRD&quot;:null,&quot;ThreeDSServerTransId&quot;:null,&quot;PolicyNumber&quot;:null}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-API-Key</stringProp>
                  <stringProp name="Header.value">2bd32efd9f5e43dbbc7bc45a769e4756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_transactionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_transactionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_OrderId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_OrderId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;orderId&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="626882578">approvalStatus&quot;:&quot;Authorized&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_08_Rebate" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Rebate">
            <stringProp name="HTTPSampler.domain">${P_URLUpt}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pay/uat/webAPI/Rebate</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Source&quot;:2,&quot;ApplicationId&quot;:&quot;COM&quot;,&quot;MerchantId&quot;:&quot;10001&quot;,&quot;Amount&quot;:10,&quot;Comments&quot;:[],&quot;OrderId&quot;:&quot;${P_OrderId}&quot;,&quot;ApplicationName&quot;:&quot;Echelon&quot;,&quot;ProductId&quot;:&quot;MO&quot;,&quot;CustomerId&quot;:&quot;27919_002&quot;,&quot;ProviderOrderID&quot;:&quot;&quot;}&#xd;
 &#xd;
 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-API-Key</stringProp>
                  <stringProp name="Header.value">2bd32efd9f5e43dbbc7bc45a769e4756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="626882578">approvalStatus&quot;:&quot;Authorized&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_09_Credit" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Credit">
            <stringProp name="HTTPSampler.domain">${P_URLUpt}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pay/uat/webAPI/credit</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Source&quot;: 2,&#xd;
    &quot;ApplicationId&quot;: &quot;COM&quot;,&#xd;
    &quot;MerchantId&quot;: &quot;10001&quot;,&#xd;
    &quot;PayerReference&quot;: null,&#xd;
    &quot;CardReference&quot;: &quot;COM-CR-UfJgEbK3kSFqkSh&quot;,&#xd;
    &quot;Amount&quot;: 35365.0,&#xd;
    &quot;TransactionId&quot;: null,&#xd;
    &quot;Comments&quot;: [],&#xd;
    &quot;OrderId&quot;: &quot;Order_${__time(yyyy-MM-dd HH:mm:ss)}&quot;,&#xd;
    &quot;ApplicationName&quot;: &quot;Echelon&quot;,&#xd;
    &quot;MITCITCode&quot;: &quot;CREC&quot;,&#xd;
    &quot;TokenId&quot;: 0,&#xd;
    &quot;AdditionalData&quot;: null,&#xd;
    &quot;ProductId&quot;: &quot;MO&quot;,&#xd;
    &quot;CustomerId&quot;: &quot;35756_003&quot;,&#xd;
    &quot;Currency&quot;: &quot;GBP&quot;,&#xd;
    &quot;EncryptionKey&quot;: null,&#xd;
    &quot;DeferredId&quot;: 0,&#xd;
    &quot;SRD&quot;: null,&#xd;
    &quot;ThreeDSServerTransId&quot;: null,&#xd;
    &quot;PolicyNumber&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-API-Key</stringProp>
                  <stringProp name="Header.value">2bd32efd9f5e43dbbc7bc45a769e4756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="626882578">approvalStatus&quot;:&quot;Authorized&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_10_Debit" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Debit">
            <stringProp name="HTTPSampler.domain">${P_URLUpt}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pay/uat/webAPI/debit</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;Source&quot;: 1,&#xd;
  &quot;ApplicationId&quot;: null,&#xd;
  &quot;MerchantId&quot;: &quot;10001&quot;,&#xd;
  &quot;PayerReference&quot;: &quot;COM-PR-XjcGBheskyjAR3z&quot;,&#xd;
  &quot;CardReference&quot;: &quot;COM-CR-c69AskhbE7Viqt1&quot;,&#xd;
  &quot;Amount&quot;: 5586.0,&#xd;
  &quot;TransactionId&quot;: &quot;TIA-1001-24101-8191G-0z&quot;,&#xd;
  &quot;Comments&quot;: [ &quot;&quot;, null ],&#xd;
  &quot;OrderId&quot;: &quot;Order_${__time(yyyy-MM-dd HH:mm:ss:SS)}&quot;,&#xd;
  &quot;ApplicationName&quot;: &quot;The Insurance Application&quot;,&#xd;
  &quot;MITCITCode&quot;: &quot;CUSE&quot;,&#xd;
  &quot;TokenId&quot;: &quot;8368890&quot;,&#xd;
  &quot;AdditionalData&quot;: null,&#xd;
  &quot;ProductId&quot;: &quot;RO&quot;,&#xd;
  &quot;CustomerId&quot;: &quot;10518619&quot;,&#xd;
  &quot;Currency&quot;: &quot;GBP&quot;,&#xd;
  &quot;EncryptionKey&quot;: &quot;dtI4bD1WKgfbTCea&quot;,&#xd;
  &quot;DeferredId&quot;: 0,&#xd;
  &quot;SRD&quot;: null,&#xd;
  &quot;ThreeDSServerTransId&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-API-Key</stringProp>
                  <stringProp name="Header.value">2bd32efd9f5e43dbbc7bc45a769e4756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="626882578">approvalStatus&quot;:&quot;Authorized&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_11_Void" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Void">
            <stringProp name="HTTPSampler.domain">${P_URLUpt}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pay/uat/webAPI/void</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;MerchantId&quot;:&quot;10001&quot;,&quot;TransactionId&quot;:&quot;${C_transactionId}&quot;,&quot;OrderId&quot;:&quot;${C_OrderId}&quot;,&quot;Amount&quot;:10,&quot;ApplicationName&quot;:&quot;COM&quot;,&quot;TokenId&quot;:0,&quot;DeferredId&quot;:988314,&quot;Source&quot;:2&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-API-Key</stringProp>
                  <stringProp name="Header.value">2bd32efd9f5e43dbbc7bc45a769e4756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-418781324">Voided Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PaymentGateway_12_ZeroAuth" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ZeroAuth">
            <stringProp name="HTTPSampler.domain">${P_URLUpt}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pay/uat/webAPI/zeroauth</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Source&quot;:0,&quot;ApplicationId&quot;:null,&quot;MerchantId&quot;:&quot;10001&quot;,&quot;PayerReference&quot;:null,&quot;CardReference&quot;:&quot;COM-CR-M9Lnca65U2f9UMW&quot;,&quot;Amount&quot;:786.0,&quot;TransactionId&quot;:null,&quot;Comments&quot;:[&quot;[]&quot;],&quot;OrderId&quot;:&quot;${P_OrderId}&quot;,&quot;ApplicationName&quot;:&quot;SAP&quot;,&quot;MITCITCode&quot;:&quot;&quot;,&quot;TokenId&quot;:64995,&quot;AdditionalData&quot;:null,&quot;ProductId&quot;:&quot;MO&quot;,&quot;CustomerId&quot;:&quot;414729&quot;,&quot;Currency&quot;:&quot;GBP&quot;,&quot;EncryptionKey&quot;:&quot;6kZElpd3V5iArE4d&quot;,&quot;DeferredId&quot;:0,&quot;SRD&quot;:null,&quot;ThreeDSServerTransId&quot;:null,&quot;PolicyNumber&quot;:null}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-API-Key</stringProp>
                  <stringProp name="Header.value">2bd32efd9f5e43dbbc7bc45a769e4756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="626882578">approvalStatus&quot;:&quot;Authorized&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Thinktime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${P_Thinktime}</stringProp>
        </TestAction>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
